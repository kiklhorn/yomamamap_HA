#Dirty code
#ToDo:
  # change effect update intervals to millis in lambdas 
  # do something with default js/css for the web interface
  # year volby based on now()
  # bind select effect with other buttons
  # Dynamic temperature mapping. 
  # Idea:
  # t under zero never be yellow
  # t higher than 20 never be blue
  # or something like this


esphome:
  name: rgbcrmap
  includes:
    - wheel.h
    # - tinyxml2.h
    # - tinyxml2.cpp
    - okres.h
    # - <esp_task_wdt.h>
    # esp_task_wdt_init(15 /* timeout */, false /* panic */);
    # - libs/xml2json/rapidxml
    # - libs/xml2json/rapidjson
    # - libs/xml2json/xml2json.hpp

  on_boot: 
    priority: -100
    then:
      - delay: 5s
      - script.execute: getTemperaturesData
      # - script.execute: getVoteData


esp32:
  board: esp32doit-devkit-v1
  framework: 
    type: arduino

# Enable logging
logger:
  level: INFO

web_server:
  js_include: "./v2/www.js"
  js_url: ""
  version: 2
  local: True
  ota: False
  
# custom_component:
#     - lambda: |-
#         auto my_custom = new EggCooker(id(secs),id(state));
#         App.register_component(my_custom);
#         return {my_custom};

# Enable Home Assistant API
api:
  encryption:
    key: "ZXINxDk5Sk8o4+dS6XveJ2qurVltdoWJKurU/mVevns="

ota:
  password: "b93d1d0149cede226333702f570533e5"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: True

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rgbcrmap Fallback Hotspot"
  #   password: "BfPrNYK8vZ83"

captive_portal:

button:
  - platform: restart
    name: "Restart rgbcrmap"
    internal: True
  - platform: safe_mode
    name: "Restart (Safe Mode) rgbcrmap"
    internal: True
  - platform: template
    name: Teploty ruční aktualizace
    on_press: 
      then:
        - script.execute: getTemperaturesData
  - platform: template
    name: Volby prezident aktualizace (ruční)
    on_press: 
      then:
        - script.execute: getVoteData
        - light.turn_on: 
            id: neo
            effect: "VOLBY Prezident"              
  - platform: template
    name: Volby poslanecká sněmovna aktualizace (ruční)
    on_press: 
      then:
        - script.execute: getVotePSData
        - light.turn_on: 
            id: neo
            effect: "VOLBY PS ČR"              

        
switch:
  - platform: template
    name: "Teploty alternativní barvy:"
    id: altcolors #Adafruit nebo newWheel
    restore_state: True
    optimistic: True

globals:
  - id: tempData
    type: String
    restore_value: False
    initial_value: '"{}"'
  - id: voteData
    type: String
    restore_value: False
    initial_value: '"{}"'
  - id: rokinit
    type: boolean
    initial_value: 'true'
    restore_value: False
  - id: koloinit
    type: boolean
    initial_value: 'true'
    restore_value: False
  - id: pscrinit
    type: boolean
    initial_value: 'true'
    restore_value: False

number:
  - platform: template
    id: volbykolo  
    name: "Volby prezident kolo:"
    min_value: 1
    max_value: 2
    step: 1
    mode: BOX
    optimistic: true
    disabled_by_default: False
    restore_value: True
    initial_value: 1
    on_value:
      then:
        - if: 
            condition:
                lambda: 'return id(koloinit);'
            then:
              - globals.set: 
                  id: koloinit
                  value: 'false'
            else: 
              - script.execute: getVoteData #bufferovane = pockat a znovu
              - light.turn_on: 
                  id: neo
                  effect: "VOLBY Prezident"
              - delay: 8s
              # - script.execute: getVoteData
  # - platform: template
  #   id: volbypscrrok 
  #   name: "Rok voleb PSČR:"
  #   min_value: 2006
  #   max_value: 2060
  #   step: 1
  #   mode: BOX
  #   optimistic: true
  #   disabled_by_default: False
  #   restore_value: True
  #   initial_value: 1
  #   on_value:
  #     then:
  #       - if: 
  #           condition:
  #               lambda: 'return id(pscrinit);'
  #           then:
  #             - globals.set: 
  #                 id: pscrinit
  #                 value: 'false'
  #           else: 
  #             - script.execute: getVoteData #bufferovane = pockat a znovu
  #             - light.turn_on: 
  #                 id: neo
  #                 effect: "VOLBY PS ČR"
  #             - delay: 8s

  # - platform: template
  #   id: efektinterval #ToDo - pouzit v lambda millis
  #   name: "Efekt interval [ms]:"
  #   min_value: 50
  #   max_value: 604800000 
  #     # 1000*60*60*24*7
  #   step: 1
  #   mode: BOX
  #   optimistic: true
  #   disabled_by_default: False
  #   restore_value: True
  #   # on_value:
  #   #   then:
  #   #     - lambda: |-
  #   #         id(efektopakms) = int(x);

  - platform: template
    id: datainterval #ToDo - pouzit v lambda millis
    name: "Aktualizace dat (automatická)[s]:"
    min_value: 30
    max_value: 604800
      # 60*60*24*7
    step: 1
    mode: BOX
    optimistic: true
    disabled_by_default: False
    restore_value: True
    initial_value: 120

select:
  - platform: template
    name: "Volby prezident rok:"
    id: volbyrok
    options:
      - "2033"
      - "2028"
      - "2023"
      - "2018"
      - "2013"
    initial_option: "2023"
    optimistic: True
    restore_value: True
    on_value:
      then:
        - if: 
            condition:
                lambda: 'return id(rokinit);'
            then:
              - globals.set: 
                  id: rokinit
                  value: 'false'
            else: 
              - logger.log:
                  format: "Chosen option: %s (index %d)"
                  args: ["x.c_str()", "i"]
              - script.execute: getVoteData #bufferovane = pockat a znovu
              - light.turn_on: 
                  id: neo
                  effect: "VOLBY Prezident"              
              - delay: 8s
              - script.execute: getVoteData
  - platform: template
    name: "Volby poslanecká sněmovna rok:"
    id: volbypscrrok
    options:
      - "2006"
      - "2010"
      - "2013"
      - "2017"
      - "2021"
      - "2025"
      - "2029"
    initial_option: "2021"
    optimistic: True
    restore_value: True
    on_value:
      then:
        - if: 
            condition:
                lambda: 'return id(pscrinit);'
            then:
              - globals.set: 
                  id: pscrinit
                  value: 'false'
            else: 
              - logger.log:
                  format: "Chosen option: %s (index %d)"
                  args: ["x.c_str()", "i"]
              - script.execute: getVotePSData #bufferovane = pockat a znovu
              - light.turn_on: 
                  id: neo
                  effect: "VOLBY PS ČR"              
              - delay: 8s
              - script.execute: getVotePSData
light:
  - platform: neopixelbus
    # restore_mode: ALWAYS_OFF
    type: GRB
    variant: WS2812
    pin: GPIO13
    # method: 
    num_leds: 77
    name: "Zobrazit na mapě:"
    id: neo
    color_correct: [80%,80%,80%]
    default_transition_length: 
      seconds: 0

  # - platform: fastled_clockless
    # chipset: WS2812B
    # pin: GPIO13
    # # method: 
    # num_leds: 77
    # rgb_order: GRB
    # name: "NeoPixel Light"
    # id: neo
    # default_transition_length: 
    #   seconds: 0
    effects:
      - addressable_color_wipe:
          name: Barevné třpytky
      - addressable_color_wipe:
          name: Bílé třpytky
          colors:
            - red: 80%
              green: 80%
              blue: 80%
              num_leds: 1
            - red: 10%
              green: 10%
              blue: 10%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false
            # //id(neo).turn_on().set_brightness(0.99).perform();
      # - addressable_lambda:
      #     name: "test kraju 1"
      #     update_interval: 10000ms
      #     lambda: |-         
      #       it.range(0,3) = Color::random_color(); //Karlovarsky
      #       it.range(3,10) = Color::random_color(); //Ustecky
      #       it.range(10,14) = Color::random_color(); //Liberecky
      #       it.range(14,19) = Color::random_color(); //KH
      #       it.range(19,23) = Color::random_color(); //Pardubicky
      #       it.range(23,32) = Color::random_color(); //Moravsloslezsky
      #       it.range(32,37) = Color::random_color(); //Zlinsky
      #       it.range(37,45) = Color::random_color(); //Jihomoravsky
      #       it.range(45,50) = Color::random_color(); //Vysocina
      #       Color olomouc = Color::random_color();
      #       it[23] = olomouc; //Olomoucky
      #       it[24] = olomouc;
      #       it[26] = olomouc;
      #       it[33] = olomouc;
      #       it[39] = olomouc;
      #       it.range(50,57) = Color::random_color();//Jihocesky
      #       it.range(57,64) = Color::random_color();//Plzensky
      #       it.range(64,76) = Color::random_color();//Stredocesky
      #       it[76] = Color::random_color(); //Praha
      - addressable_lambda:
          name: "Test Kraje ČR"
          update_interval: 1s  #vypada to ze nelze pres lambda, ani externe pres(id) - proc??? Poradim si s tim pres millis(). ToDo
          lambda: |-    
            int nn = random(0,255), n[14];//from red to magenta? 255max 
            /*for (int element : n) {
              element = nn;
              nn += (220/14);
              //nn += (255/7);
              if (nn >= 220) { nn -= 220; }
              ESP_LOGD("custom", "e: %d -> %d", n, nn);
            }*/
              for (int i=0; i<14; i++) {
              n[i] = nn;
              nn += (255/15);
              //nn += (255/7);
              if (nn >= 255) { nn -= 255; }
              ESP_LOGD("custom", "e: %d -> %d", i, n[i]);
            }  

            it.range(0,3) = Wheel(n[0]); //Karlovarsky
            it.range(3,10) = Wheel(n[1]); //Ustecky
            it.range(10,14) = Wheel(n[2]); //Liberecky
            it.range(14,19) = Wheel(n[3]); //KH
            it.range(19,23) = Wheel(n[4]); //Pardubicky
            it.range(23,32) = Wheel(n[5]); //Moravsloslezsky
            it.range(32,37) = Wheel(n[6]); //Zlinsky
            it.range(37,45) = Wheel(n[7]); //Jihomoravsky
            it.range(45,50) = Wheel(n[8]); //Vysocina
            Color olomouc = Wheel(n[9]);
            it[23] = olomouc; //Olomoucky
            it[24] = olomouc;
            it[26] = olomouc;
            it[33] = olomouc;
            it[39] = olomouc;
            it.range(50,57) = Wheel(n[10]);//Jihocesky
            it.range(57,64) = Wheel(n[11]);//Plzensky
            it.range(64,76) = Wheel(n[12]);//Stredocesky
            it[76] = Wheel(n[13]); //Praha

      - addressable_lambda:
          name: "Test 5°C rozdíl na celou mapu"
          update_interval: 50ms
          lambda: |-
            int range = 5; //kolik °c rozdílu na celou mapu
            int mint = -15; //minimální teplota, odpovídá modré barvě
            int maxt = 40; //maximální teplota, odpovídí červené barvě
            static float h = mint;
            static int direction = 1;
            // To reset static when stopping and starting the effect
            // again you can use the initial_run variables
            if (initial_run) {
              it.all() = Color::BLACK;
              h= -15;
              // optionally do a return so nothing happens until the next update_interval
              return;
            }
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();

            // Example: Simple color wipe
            for (int i = it.size() - 1; i > 0; i--) {
              it[i] = it[i - 1].get();
            }
            int color = map(h, mint, maxt, 170, 0); // -15 .. 40°C
            h += direction * range/float(it.size()); //
            ESP_LOGD("custom", "h: %.2f ", h);
            if (h>=maxt & direction){
              direction = -1;
            }
            if (h<=mint & direction == -1){
              direction = 1;
            }
            it[0] = id(altcolors).state ? Wheel(color) : WheelAda(color) ; //Adafruit values - podivej se do wheel.h, jsou tam odkazy;

      - addressable_lambda:
          name: "Teploty TMEP [-15..+40°C]" #@tvoje___mama
          update_interval: 1s
          lambda: |-
            if (initial_run) {
              it.all() = Color::BLACK;
              id(getTemperaturesData).execute();
            }
            static int last_update;
            static int zobrazlog = false;
            int update_time = int(id(datainterval).state); //how quickly to update in seconds
            if((last_update + (update_time * 1000)) < millis()){
              last_update = millis();
              id(getTemperaturesData).execute();
              zobrazlog = true; 
            }          
            DynamicJsonDocument doc(6144);
            //Serial.println(id(tempData));
            DeserializationError error = deserializeJson(doc, id(tempData));
            if (error) {
              Serial.print("deserializeJson() failed: ");
              Serial.println(error.c_str());
              return;
            }
            for (JsonObject item : doc.as<JsonArray>()) {
              int ledIndex = item["id"]; // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, ...
              ledIndex -= 1;
              float h = item["h"]; // -0.6, -4.3, -2.2, -1.5, -0.5, -0.5, 0.9, -0.4, -2.5, -0.5, -2.2, -3.4, -3.9, ...
              int color = map(h, -15, 40, 170, 0);
              it[ledIndex] = id(altcolors).state ? Wheel(color) : WheelAda(color) ; //Adafruit values - podivej se do wheel.h, jsou tam odkazy
              if (zobrazlog) {
                ESP_LOGI("teploty","%-20s \tt: %.2f°C, barva rgb:%3d/%3d %3d/%3d %3d/%3d  (Wheel/WheelAda) ",(ledNames[ledIndex]).c_str(),h,Wheel(color)[0],WheelAda(color)[0],Wheel(color)[1],WheelAda(color)[1],Wheel(color)[2],WheelAda(color)[2]);
              }
            }
            zobrazlog = false;
            //id(neo).turn_on().set_brightness(0.99).perform();
      - addressable_lambda:
          name: "Teploty TMEP [min..max]" # @jirka1213
          update_interval: 1s
          lambda: |-
            if (initial_run) {
              it.all() = Color::BLACK;
              id(getTemperaturesData).execute();
              return;
            }
            static int last_update;
            static int zobrazlog = false;
            int update_time = int(id(datainterval).state); //how quickly to update in seconds
            if((last_update + (update_time * 1000)) < millis()){
              last_update = millis();
              id(getTemperaturesData).execute(); 
              zobrazlog = true; 
            }          
            double maxTemp = -99;
            double minTemp =  99;
            int minIndex, maxIndex;
            DynamicJsonDocument doc(4096);
            Serial.println(id(tempData));
            DeserializationError error = deserializeJson(doc, id(tempData));
            if (error) {
              Serial.print("deserializeJson() failed: ");
              Serial.println(error.c_str());
              return;
            }
            //Zjisti min a max teplotu pro mapping
            for (JsonObject item : doc.as<JsonArray>()) {
              int ledIndex = item["id"];
              ledIndex -= 1;
              float h = item["h"];
              if (h < minTemp) {minTemp = h; minIndex = ledIndex; }
              if (h > maxTemp) {maxTemp = h; maxIndex = ledIndex; }
            }

            for (JsonObject item : doc.as<JsonArray>()) {
              int ledIndex = item["id"]; // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, ...
              ledIndex -= 1;
              float h = item["h"]; // -0.6, -4.3, -2.2, -1.5, -0.5, -0.5, 0.9, -0.4, -2.5, -0.5, -2.2, -3.4, -3.9, ...
              int color = map(h, minTemp, maxTemp, 170, 0);
              it[ledIndex] = id(altcolors).state ? Wheel(color) : WheelAda(color) ; //Adafruit values - podivej se do wheel.h, jsou tam odkazy
              if (zobrazlog) {
                ESP_LOGI("teploty","%-20s \tt: %.2f°C, barva rgb:%3d/%3d %3d/%3d %3d/%3d  (Wheel/WheelAda) ",(ledNames[ledIndex]).c_str(),h,Wheel(color)[0],WheelAda(color)[0],Wheel(color)[1],WheelAda(color)[1],Wheel(color)[2],WheelAda(color)[2]);
              }
              if (zobrazlog && ledIndex >= 76) {
                ESP_LOGI("teploty","min: %.2f°C okres: %s, max: %.2f°C okres: %s", minTemp, ledNames[minIndex].c_str(), maxTemp, ledNames[maxIndex].c_str());
              }
            }
            zobrazlog = false;
      - addressable_lambda:
          name: "Teploty TMEP [min..max] with offset" # @kiklhorn
          update_interval: 1s
          lambda: |-
            if (initial_run) {
              it.all() = Color::BLACK;
              id(getTemperaturesData).execute();
              return;
            }
            static int last_update;
            static int zobrazlog = false;
            int update_time = int(id(datainterval).state); //how quickly to update in seconds
            if((last_update + (update_time * 1000)) < millis()){
              last_update = millis();
              id(getTemperaturesData).execute(); 
              zobrazlog = true; 
            }          
            float maxC = 0;
            float minC = 170; 
            double maxTemp = -99;
            double minTemp =  99;
            int minIndex, maxIndex;
            DynamicJsonDocument doc(4096);
            //DynamicJsonDocument doc(6144);
            //Serial.println(id(tempData));
            DeserializationError error = deserializeJson(doc, id(tempData));
            if (error) {
              Serial.print("deserializeJson() failed: ");
              Serial.println(error.c_str());
              return;
            }
            //Zjisti min a max teplotu pro mapping
            for (JsonObject item : doc.as<JsonArray>()) {
              int ledIndex = item["id"];
              ledIndex -= 1;
              float h = item["h"];
              if (h < minTemp) {minTemp = h; minIndex = ledIndex; }
              if (h > maxTemp) {maxTemp = h; maxIndex = ledIndex; }
            }
            if (minTemp > 14 ) minC = 127; //green
            if (maxTemp < 20) maxC = 42; //yellow

            for (JsonObject item : doc.as<JsonArray>()) {
              int ledIndex = item["id"]; // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, ...
              ledIndex -= 1;
              float h = item["h"]; // -0.6, -4.3, -2.2, -1.5, -0.5, -0.5, 0.9, -0.4, -2.5, -0.5, -2.2, -3.4, -3.9, ...
              int color = map(h, minTemp, maxTemp, minC, maxC);
              it[ledIndex] = id(altcolors).state ? Wheel(color) : WheelAda(color) ; //Adafruit values - podivej se do wheel.h, jsou tam odkazy
              if (zobrazlog) {
                ESP_LOGI("teploty","%-20s \tt: %.2f°C, barva rgb:%3d/%3d %3d/%3d %3d/%3d  (Wheel/WheelAda) ",(ledNames[ledIndex]).c_str(),h,Wheel(color)[0],WheelAda(color)[0],Wheel(color)[1],WheelAda(color)[1],Wheel(color)[2],WheelAda(color)[2]);
              }
              if (zobrazlog && ledIndex >= 76) {
                ESP_LOGI("teploty","min: %.2f°C okres: %s, max: %.2f°C okres: %s", minTemp, ledNames[minIndex].c_str(), maxTemp, ledNames[maxIndex].c_str());
              }
            }
            zobrazlog = false;
      - addressable_lambda:
          name: "VOLBY Prezident"
          update_interval: 1s
          lambda: |-
            if (initial_run) {
              it.all() = Color::BLACK;
              id(getVoteData).execute(); //try prepare data on Node-RED (buffered mode, see comments on node-RED flow)
              // optionally do a return so nothing happens until the next update_interval
              // return;
            }
            static int last_update;
            static int zobrazlog = false;
            int update_time = int(id(datainterval).state); //how quickly to update in seconds
            if((last_update + (update_time * 1000)) < millis()){
              last_update = millis();
              id(getVoteData).execute(); // (read previous data and prepare data for the next read(buffered mode))
              zobrazlog = true;
            }
            double maxTemp = -99;
            double minTemp =  99;
            DynamicJsonDocument doc(6144); // size calculator: https://arduinojson.org/v6/assistant/
            // nasledujici radek odkomentovat pro debug
            // Serial.println(id(voteData));
            DeserializationError error = deserializeJson(doc, id(voteData));
            if (error) {
              Serial.print("deserializeJson() failed: ");
              Serial.println(error.c_str());
              return;
            }
            //Zjisti min a max teplotu pro mapping
            for (JsonObject item : doc.as<JsonArray>()) {
              float h = item["h"];
              if (h < minTemp) minTemp = h;
              if (h > maxTemp) maxTemp = h;
            }

            for (JsonObject item : doc.as<JsonArray>()) {
              int ledIndex = item["id"]; // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, ...
              ledIndex -= 1;
              float h = item["h"]; // -0.6, -4.3, -2.2, -1.5, -0.5, -0.5, 0.9, -0.4, -2.5, -0.5, -2.2, -3.4, -3.9, ...
              int color = map(h, minTemp, maxTemp, 0, 170);
              if (h == -99) {  //nejsou k dispozici realna data, nastavim flag pro znovunacteni po skonceni cyklu, nebo zatim proste zobrazim mapu fialovou
           
                color = 218;
              }
              it[ledIndex] = id(altcolors).state ? Wheel(color) : WheelAda(color) ; //Adafruit values - podivej se do wheel.h, jsou tam odkazy
              if (zobrazlog) {
                ESP_LOGI("volby","okres: %-20s \t\tkandidat: %.2f, barva rgb:%3d/%3d %3d/%3d %3d/%3d  (Wheel/WheelAda) ",(ledNames[ledIndex]).c_str(),h,Wheel(color)[0],WheelAda(color)[0],Wheel(color)[1],WheelAda(color)[1],Wheel(color)[2],WheelAda(color)[2]);
              }
            }
            zobrazlog = false; //Zobrazi se pouze v prvnim cyklu vzdy po aktualizaci dat po skonceni cyklu vypne
      - addressable_lambda:
          name: "VOLBY PS ČR"
          update_interval: 1s
          lambda: |-
            if (initial_run) {
              it.all() = Color::BLACK;
              id(getVotePSData).execute(); //try prepare data on Node-RED (buffered mode, see comments on node-RED flow)
              // optionally do a return so nothing happens until the next update_interval
              // return;
            }
            static int last_update;
            static int zobrazlog = false;
            int update_time = int(id(datainterval).state); //how quickly to update in seconds
            if((last_update + (update_time * 1000)) < millis()){
              last_update = millis();
              id(getVotePSData).execute(); // (read previous data and prepare data for the next read(buffered mode))
              zobrazlog = true;
            }
            double maxTemp = -99;
            double minTemp =  99;
            DynamicJsonDocument doc(6144); // size calculator: https://arduinojson.org/v6/assistant/
            // nasledujici radek odkomentovat pro debug
            // Serial.println(id(voteData));
            DeserializationError error = deserializeJson(doc, id(voteData));
            if (error) {
              Serial.print("deserializeJson() failed: ");
              Serial.println(error.c_str());
              return;
            }
            //Zjisti min a max teplotu pro mapping
            for (JsonObject item : doc.as<JsonArray>()) {
              float h = item["h"];
              if (h < minTemp) minTemp = h;
              if (h > maxTemp) maxTemp = h;
            }

            for (JsonObject item : doc.as<JsonArray>()) {
              int ledIndex = item["id"]; // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, ...
              ledIndex -= 1;
              float h = item["h"]; // -0.6, -4.3, -2.2, -1.5, -0.5, -0.5, 0.9, -0.4, -2.5, -0.5, -2.2, -3.4, -3.9, ...
              int color = map(h, minTemp, maxTemp, 0, 170);
              if (h == -99) {  //nejsou k dispozici realna data, nastavim flag pro znovunacteni po skonceni cyklu, nebo zatim proste zobrazim mapu fialovou
           
                color = 218;
              }
              it[ledIndex] = id(altcolors).state ? Wheel(color) : WheelAda(color) ; //Adafruit values - podivej se do wheel.h, jsou tam odkazy
              if (zobrazlog) {
                ESP_LOGI("PSCR","okres: %-20s \t\tkandidat: %.2f, barva rgb:%3d/%3d %3d/%3d %3d/%3d  (Wheel/WheelAda) ",(ledNames[ledIndex]).c_str(),h,Wheel(color)[0],WheelAda(color)[0],Wheel(color)[1],WheelAda(color)[1],Wheel(color)[2],WheelAda(color)[2]);
              }
            }
            zobrazlog = false; //Zobrazi se pouze v prvnim cyklu vzdy po aktualizaci dat po skonceni cyklu vypne


json:

http_request:
  id: http_request_data
  useragent: esphome/rgbcrmap
  timeout: 14s

async_tcp:

# # https://arduinojson.org/v6/assistant/#/step1
# time:  
#   - platform: sntp
#     on_time:
#       - seconds: 0
#         minutes: /50
#         then:
#           - script.execute: getTemperaturesData

script:
  - id: getTemperaturesData
    mode: queued
    then:
      - logger.log:
          level: info
          format: "HTTP Request get Data"
      - http_request.get:
          url: "http://cdn.tmep.cz/app/export/okresy-cr-teplota.json"
          verify_ssl: false
          on_response:
            - if:
                condition:
                  lambda: |-
                    return status_code == 200;  
                then:
                  - logger.log:
                      level: info
                      tag: "getTemperaturesdata"
                      format: "Response status: %d, Duration: %u ms"
                      args:
                        - status_code
                        - duration_ms  
                  - lambda: |- 
                      //String tempData;
                      id(tempData) = id(http_request_data).get_string();
  - id: getVoteData
    mode: queued
    then:
      - logger.log:
          level: info
          format: "HTTP Request get Data"
      - http_request.get:
          # url: "https://192.168.199.99:1880/endpoint/volby?buff=true&typ=prezident&kolo=1&rok=2013"   #rok 2013,2018,2023...  URL params - look at Node-RED flow
          url: !lambda |-
            return ((std::string) "http://192.168.199.99:1880/endpoint/volby?buff=true&typ=prezident&kolo=" + String(int(id(volbykolo).state)).c_str() + "&rok=" + id(volbyrok).state).c_str();
          headers:
            Content-Type: application/json
        # User-Agent: MapaTvojiMamyESPHome/0.9
          verify_ssl: false
          on_response:
            - if:
                condition:
                  lambda: |-
                    return status_code == 200;  
                then:
                  - logger.log:
                      level: info
                      tag: "getVoteData"
                      format: "Response status: %d, Duration: %u ms"
                      args:
                        - status_code
                        - duration_ms  
                # else:
                #   - logger.log:
                #       level: warn
                #       tag: "getVoteData"
                #       format: "Response status: %d, Duration: %u ms"
                #       args:
                #         - status_code
                #         - duration_ms  
                  - lambda: |- 
                      //String tempData;
                      id(voteData) = id(http_request_data).get_string();
  - id: getVotePSData
    mode: queued
    then:
      - logger.log:
          level: info
          format: "HTTP Request get Data"
      - http_request.get:
          # url: "https://192.168.199.99:1880/endpoint/volby?buff=true&typ=prezident&kolo=1&rok=2013"   #rok 2013,2018,2023...  URL params - look at Node-RED flow
          url: !lambda |-
            return ((std::string) "http://192.168.199.99:1880/endpoint/volby?buff=true&typ=pscr&rok=" + id(volbypscrrok).state).c_str();
          headers:
            Content-Type: application/json
        # User-Agent: MapaTvojiMamyESPHome/0.9
          verify_ssl: false
          on_response:
            - if:
                condition:
                  lambda: |-
                    return status_code == 200;  
                then:
                  - logger.log:
                      level: info
                      tag: "getVotePSData"
                      format: "Response status: %d, Duration: %u ms"
                      args:
                        - status_code
                        - duration_ms  
                # else:
                #   - logger.log:
                #       level: warn
                #       tag: "getVoteData"
                #       format: "Response status: %d, Duration: %u ms"
                #       args:
                #         - status_code
                #         - duration_ms  
                  - lambda: |- 
                      //String tempData;
                      id(voteData) = id(http_request_data).get_string();